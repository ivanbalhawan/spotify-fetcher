[project]
name = "Spotify-Fetcher"
version = "0.1.0"
description = "Authenticate with Spotify and fetch your favorite tracks"
authors = [
    {name = "Mateus Furquim", email = "mfurquimdev@gmail.com"},
]
dependencies = [
    "requests>=2.31.0",
    "ipython>=8.17.2",
    "fastapi>=0.104.1",
    "spotipy>=2.23.0",
    "dash>=2.14.1",
    "plotly>=5.18.0",
    "pandas>=2.1.3",
    "orjson>=3.9.10",
    "pydantic-settings>=2.1.0",
    "attrs>=23.1.0",
]
requires-python = ">=3.11"
readme = "README.md"
license = {text = "MIT"}

[tool.pdm.dev-dependencies]
dev = [
    "uvicorn>=0.24.0",
    "isort>=5.12.0",
    "black>=23.11.0",
    "ruff>=0.1.5",
    "mypy>=1.7.0",
    "pyright>=1.1.336",
    "pre-commit>=3.5.0",
]

[tool.pdm.scripts]
start.cmd = "uvicorn src.main:app --reload --workers 1 --host 0.0.0.0 --port 56626"
start.env_file.override = ".env"

[tool.mypy]
plugins = [
    "pydantic.mypy"
]

# From cookiecutter
# https://github.com/cjolowicz/cookiecutter-hypermodern-python/blob/main/%7B%7Bcookiecutter.project_name%7D%7D/pyproject.toml
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_context = true

# From Pydantic
# https://docs.pydantic.dev/latest/integrations/mypy/#configuring-the-plugin
follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = false
disallow_any_generics = true
check_untyped_defs = false
no_implicit_reexport = true  # specify __all__ = ['FunctionToExport']

# for strict mypy, turn this on
disallow_untyped_defs = false

# for less strict mypy, turn this on instead
disallow_incomplete_defs = true

# when it doesn't find stubs
ignore_missing_imports = true

ignore_unused_allowlist = ["reportGeneralTypeIssues", "no-redef"]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.pyright]
reportMissingImports = false

[tool.ruff]
line-length = 100
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
target-version = "py38"

# Enable by default.
# See [Ruff Rules](https://beta.ruff.rs/docs/rules) for more information
select = [
  "A",    # [flake8-builtins](https://pypi.org/project/flake8-builtins/)
  "B",    # [flake8-bugbear](https://pypi.org/project/flake8-bugbear/)
  "F",    # [pyflake](https://pypi.org/project/pyflakes/)
  "W",    # [pycodestyle](https://pypi.org/project/pycodestyle/)
  "UP",   # [pyupgrade](https://pypi.org/project/pyupgrade/)
# "ARG",  # [flake8-unused-arguments](https://pypi.org/project/flake8-unused-arguments/)
# "BLE",  # [flake8-blind-except](https://pypi.org/project/flake8-blind-except/)
# "C4",   # [flake8-comprehensions](https://pypi.org/project/flake8-comprehensions/)
# "C90",  # [mccabe complexity](https://pypi.org/project/mccabe/)
# "COM",  # [flake8-commas](https://pypi.org/project/flake8-commas/)
# "D",    # [pydocstyle](https://pypi.org/project/pydocstyle/)
# "DTZ",  # [flake8-datetimez](https://pypi.org/project/flake8-datetimez/)
# "E",    # [pycodestyle](https://pypi.org/project/pycodestyle/)
# "EM",   # [flake8-errmsg](https://pypi.org/project/flake8-errmsg/)
# "ERA",  # [eradicate](https://pypi.org/project/eradicate/)
# "FBT",  # [flake8-boolean-trap](https://pypi.org/project/flake8-boolean-trap/)
# "FLY",  # [flynt](https://pypi.org/project/flynt/)
# "ICN",  # [flake8-import-conventions](https://github.com/joaopalmeiro/flake8-import-conventions)
# "ISC",  # [flake8-implicit-str-concat](https://pypi.org/project/flake8-implicit-str-concat/)
# "N",    # [pep8-naming](https://pypi.org/project/pep8-naming/)
# "NPY",  # [NumPy-specific rules](https://beta.ruff.rs/docs/rules/#numpy-specific-rules-npy)
# "PD",   # [pandas-vet](https://pypi.org/project/pandas-vet/)
# "PERF", # [Perflint](https://pypi.org/project/perflint/)
# "PIE",  # [flake8-pie](https://pypi.org/project/flake8-pie/)
# "PT",   # [flake8-pytest-style](https://pypi.org/project/flake8-pytest-style/)
# "PTH",  # [flake8-use-pathlib](https://pypi.org/project/flake8-use-pathlib/)
# "PYI",  # [flake8-pyi](https://pypi.org/project/flake8-pyi/)
# "Q",    # [flake8-quotes](https://pypi.org/project/flake8-quotes/)
# "RET",  # [flake8-return](https://pypi.org/project/flake8-return/)
# "RSE",  # [flake8-raise](https://pypi.org/project/flake8-raise/)
# "RUF",  # [Ruff-specific rules](https://beta.ruff.rs/docs/rules/#ruff-specific-rules-ruf)
# "S",    # [flake8-bandit](https://pypi.org/project/flake8-bandit/)
# "SIM",  # [flake8-simplify](https://pypi.org/project/flake8-simplify/)
# "SLF",  # [flake8-self](https://pypi.org/project/flake8-self/)
# "SLOT", # [flake8-slots](https://pypi.org/project/flake8-slots/)
# "T10",  # [flake8-debugger](https://pypi.org/project/flake8-debugger/)
# "T20",  # [flake8-print](https://pypi.org/project/flake8-print/)
# "TD",   # [flake8-todos](https://github.com/orsinium-labs/flake8-todos/)
# "TID",  # [flake8-tidy-imports](https://pypi.org/project/flake8-tidy-imports/)
# "TRY",  # [tryceratops](https://pypi.org/project/tryceratops/)
]

extend-ignore = [
  "D203",
  "D204",
  "D213",
  "D215",
  "D400",
  "D404",
  "D406",
  "D407",
  "D408",
  "D409",
  "D413",
]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Ignore `E402` (import violations) in all `__init__.py` files
[tool.ruff.per-file-ignores]
"__init__.py" = ["E402", "I001", "F401"]

[tool.ruff.isort]
force-single-line = true

[tool.isort]
py_version = 3
profile = "black"
force_single_line = true

[tool.black]
line-length = 100
safe = true
